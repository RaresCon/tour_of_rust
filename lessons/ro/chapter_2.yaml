- title: Capitolul 2 - Controlul Basic al Flow-ului
  content_markdown: >
    În acest capitol vom vorbi despre metodele de control basic al flow-ului în Rust.

    Dacă ești familiar cu limbaje bazate pe C, o să te simți ca acasă și
    poate

    te vei bucura de o surpriză sau două.
- title: if/else
  content_markdown: >
    Ramificarea codului în Rust nu este surprinzătoare.


    Condițiile nu au nevoie de paranteze! Am avut vreodată de fapt nevoie de ele? Logica noastră
    poate arăta acum frumos și curat.


    În rest, toți operatorii relaționali și logici funcționează la fel: `==`, `!=`, `<`,
    `>`, `<=`, `>=`, `!`, `||`, `&&`.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20if%20x%20%3C%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22less%20than%2042%22)%3B%0A%20%20%20%20%7D%20else%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20println!(%22is%2042%22)%3B%0A%20%20%20%20%7D%20else%20%7B%0A%20%20%20%20%20%20%20%20println!(%22greater%20than%2042%22)%3B%0A%20%20%20%20%7D%0A%7D
- title: bucle
  content_markdown: |
    Ai nevoie de o buclă infinită?

    Rust face asta într-un mod foarte simplu.

    `break` te va arunca în afara buclei când ești pregătit.

    `loop` are un secret despre care vom vorbi curând.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: while
  content_markdown: |
    `while` te lasă să adaugi o condiție logică unei bucle.

    Dacă condiția impusă buclei devine falsă, bucla se va termina.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20while%20x%20!%3D%2042%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%7D%0A%20%20%20%20println!(%22x%20is%20%7B%7D%22%2C%20x)%3B%0A%7D%0A
- title: for
  content_markdown: >
    Bucla `for` din Rust e o îmbunătățire importantă. Ea

    iterează prin valorile oricărei expresii care poate fi transformată într-un iterator.
    Ce este

    un iterator? Un iterator este un obiect pe care îl poți întreba "Care este
    the

    următorul element pe care îl ai?" până când acesta nu mai are elemente.


    Vom explora acest lucru într-un capitol viitor. Între timp, ține minte că Rust
    poate 

    creea ușor iteratori care generează o secvență de numere întregi.


    Operatorul `..` creează un iterator care generează numere de la un
    număr pâna la

    alt număr, fără să îl includă pe cel din urmă.


    Operatorul `..=` creează un iterator care generează numere de la un număr
    număr pâna la 

    alt număr, inclusiv cel din urmă.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20for%20x%20in%200..5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%0A%20%20%20%20for%20x%20in%200..%3D5%20%7B%0A%20%20%20%20%20%20%20%20println!(%22%7B%7D%22%2C%20x)%3B%0A%20%20%20%20%7D%0A%7D%0A
- title: match
  content_markdown: >
    Îți lipsește switch-ul din C? Rust are un cuvânt cheie incredibil de folositor

    pentru îndeplinirea tuturor posibilităților unei valori și executarea unei bucăți de cod dacă
    o anumită

    posibilitate este adevărată. Hai să vedem cum merge asta pentru numere. Avem de discutat mai
    multe

    în capitolele viitoare despre pattern matching pentru date mai complexe. Îți promit că
    o să

    merite așteptarea.


    `match` este exhaustiv, deci toate cazurile

    trebuie să fie abordate și implementate.


    Matching combinat cu destructurarea datelor este de departe unul din

    cele mai întâlnite pattern-uri pe care le vei vedea în Rust.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%0A%20%20%20%20match%20x%20%7B%0A%20%20%20%20%20%20%20%200%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20zero%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20multiple%20values%0A%20%20%20%20%20%20%20%201%20%7C%202%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%201%20or%202!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20match%20against%20ranges%0A%20%20%20%20%20%20%20%203..%3D9%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20a%20number%203%20to%209%20inclusively%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20we%20can%20bind%20the%20matched%20number%20to%20a%20variable%0A%20%20%20%20%20%20%20%20matched_num%20%40%2010..%3D100%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20%7B%7D%20number%20between%2010%20to%20100!%22%2C%20matched_num)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%20this%20is%20the%20default%20match%20that%20must%20exist%20if%20not%20all%20cases%20are%20handled%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20println!(%22found%20something%20else!%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%7D%0A
- title: Returnarea unor valori dintr-o bucla
  content_markdown: |
    `loop` poate fi oprit pentru a returna o valoare.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20let%20mut%20x%20%3D%200%3B%0A%20%20%20%20let%20v%20%3D%20loop%20%7B%0A%20%20%20%20%20%20%20%20x%20%2B%3D%201%3B%0A%20%20%20%20%20%20%20%20if%20x%20%3D%3D%2013%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20break%20%22found%20the%2013%22%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20loop%3A%20%7B%7D%22%2C%20v)%3B%0A%7D%0A
- title: Returnarea unor valori din expresii block
  content_markdown: >
    `if`-urile, `match`-urile, funcțiile și scope block-urile au un mod unic de
    a returna valori în Rust.


    Dacă ultima instrucțiune din interiorul unui/unei `if`, `match`, funcții sau scope block este o
    expresie fără

    `;`, Rust o va returna sub forma unei valori din acel block. Acesta

    este un mod foarte bun de a creea logică concisă care returnează o valoare care poate fi pusă
    într-o

    variabilă nouă.


    Observăm cum acest lucru permite unui `if` să opereze ca o expresie ternară concisă.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20example()%20-%3E%20i32%20%7B%0A%20%20%20%20let%20x%20%3D%2042%3B%0A%20%20%20%20%2F%2F%20Rust's%20ternary%20expression%0A%20%20%20%20let%20v%20%3D%20if%20x%20%3C%2042%20%7B%20-1%20%7D%20else%20%7B%201%20%7D%3B%0A%20%20%20%20println!(%22from%20if%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20let%20food%20%3D%20%22hamburger%22%3B%0A%20%20%20%20let%20result%20%3D%20match%20food%20%7B%0A%20%20%20%20%20%20%20%20%22hotdog%22%20%3D%3E%20%22is%20hotdog%22%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20notice%20the%20braces%20are%20optional%20when%20its%20just%20a%20single%20return%20expression%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20%22is%20not%20hotdog%22%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22identifying%20food%3A%20%7B%7D%22%2C%20result)%3B%0A%0A%20%20%20%20let%20v%20%3D%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20This%20scope%20block%20lets%20us%20get%20a%20result%20without%20polluting%20function%20scope%0A%20%20%20%20%20%20%20%20let%20a%20%3D%201%3B%0A%20%20%20%20%20%20%20%20let%20b%20%3D%202%3B%0A%20%20%20%20%20%20%20%20a%20%2B%20b%0A%20%20%20%20%7D%3B%0A%20%20%20%20println!(%22from%20block%3A%20%7B%7D%22%2C%20v)%3B%0A%0A%20%20%20%20%2F%2F%20The%20idiomatic%20way%20to%20return%20a%20value%20in%20rust%20from%20a%20function%20at%20the%20end%0A%20%20%20%20v%20%2B%204%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20println!(%22from%20function%3A%20%7B%7D%22%2C%20example())%3B%0A%7D%0A
- title: Capitolul 2 - Incheiere
  content_markdown: >
    Sper că ți-am arătat o părticică din puterea Rust-ului chiar și prin cele mai

    simple caracteristici ale unui limbaj de programare. Vom vorbi despre `for` și

    `match` și mai profund pe măsură ce acumulăm mai multe cunoștințe care

    ne pot ajuta să ne folosim de capabilitățile lor. În cele ce urmează o să aruncăm o privire peste structurile
    de date fundamentale

    din Rust.
