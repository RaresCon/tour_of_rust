- title: Capitolul 3 - Tipuri de structuri de date basic
  content_markdown: >
    Este timpul să explorăm tipuri de date dincolo de cele de bază! În acest capitol o să aruncăm o privire peste
    structurile de date

    primitive din Rust, punând accent pe reprezentarea lor în
    memorie. Cred

    c-o să vă placă cum Rust ascunde foarte puține despre cum funcționează lucrurile.
- title: Structuri
  content_markdown: >
    Un `struct` este o colecție de câmpuri (field-uri).


    *Câmpurile* sunt pe scurt date asociate unei structuri. Valorile lor
    pot fi de tip primitiv sau o structură de date.


    Definiția structurii este ca o matriță pentru compilator pentru a ști cum să aranjeze
    câmpurile în memorie într-un mod compact.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20este%20un%20struct%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D
- title: Apelarea metodelor
  content_markdown: >
    Spre deosebire de funcții, metodele sunt funcții asociate unui tip specific
    de date.


    **metode statice** — metode care aparțin unui tip de date și sunt apelate folosind
    operatorul `::`.


    **metode ale instanței** — metode care aparțin unei instanțe a unui tip de date și sunt
    apelate folosind operatorul `.`.


    Vom dezvolta acest concept cu implementarea propriilor metode în capitole viitoare.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Folosim%20o%20metod%C4%83%20static%C4%83%20ca%20s%C4%83%20creem%20o%20instan%C8%9B%C4%83%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20Folosim%20o%20metod%C4%83%20a%20instan%C8%9Bei%0A%20%20%20%20println!(%22%7B%7D%20is%20%7B%7D%20characters%20long.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: Memorie
  content_markdown: >
    Aplicațiile scrise în Rust au 3 zone de memorie unde este stocată informație:

    * **memoria pentru date** - pentru date care sunt de dimensiune fixă și sunt **statice** (ex:
    mereu disponibile pe toată durata rulării aplicației). 
      Spre exemplu, textul din programul tău (ex: "Hello World!"): Memoria ocupată (bytes) de acest text este citită dintr-un singur loc în cod
      deci poate fi stocat în această zonă de memorie. Compilatoarele fac o groază de optimizări 
      pentru acest tip de date și folosirea lor în general este considerată foarte rapidă, pentru că
      locația lor este cunoscută și fixă.
    * **memoria pentru stivă (stack)** - pentru date declarate ca variabile în interiorul unei
    funcții. 
      Locația în memorie a acestor date nu se schimbă pe durata apelului funcției; datorită acestui lucru compilatoarele 
      pot optimiza codul astfel încât datele din stivă se accesează foarte rapid.
    * **memoria pentru alocare dinamică (heap)** - pentru informație care este creată în timp ce aplicația
    rulează. 
      Datele în această zonă de memorie pot fi adăugate, mutate, șterse, redimensionate, etc. Din cauza 
      naturii sale dinamice, este în general considerată mai lentă, dar această zonă permite 
      utilizări mult mai creative ale memoriei. Când adăugăm date în această zonă de memorie, 
      numim această operație **alocare (de memorie)**. Când eliberăm date din această zonă de memorie, numim această operație 
      **dealocare (de memorie)**.
- title: Crearea datelor în Memorie
  content_markdown: >
    Când **instanțiem** o **structură** în codul nostru, aplicația creează
    câmpurile de date unul lângă altul în memorie.


    Instanțiem o structură specificând toate valorile câmpurilor în interiorul 


    `StructName { ... }`.


    Câmpurile unei structuri sunt accesate folosind operatorul `.`.


    Detalii despre memorie în exemplul nostru:

    * Textul din interiorul ghilimelelor este informație read-only (ex: "Ferris"), deci acesta
    este 
      pus în zona *memoriei pentru date*.
    * Apelul funcției `String::from` creează o structură de tip `String` care este pus
    unul 
      lângă altul cu toate câmpurile structurii SeaCreature în *stivă*. Un String reprezintă text care poate fi modificat 
      și face acest lucru prin intermediul următoarelor aspecte:
      1. Alocă memorie pe *heap* pentru text unde va putea fi modificat
      2. Stochează o referință la acea locație de pe *heap* în structura `String` 
      (Mai multe despre acest concept în următoarele lecții) 
    * Așadar, cei doi prieteni ai noștri, *Ferris* și *Sarah*, sunt date care
    vor avea mereu
      valori fixe în aplicația noastră, deci vor fi puși în *stivă*.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20datele%20din%20SeaCreature%20sunt%20pe%20stiv%C4%83%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Struct-ul%20String%20este%20de%20asemenea%20pe%20stiv%C4%83%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20dar%20%C8%9Bine%20o%20referin%C8%9B%C4%83%20a%20informa%C8%9Biei%20pe%20heap%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22crab%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22ghiar%C4%83%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22caracati%C8%9B%C4%83%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22creier%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20este%20%7B%7D.%20Are%20%7B%7D%20m%C3%A2ini%2C%20%7B%7D%20picioare%2C%20%C8%99i%20%7B%7D%20pe%20post%20de%20arm%C4%83%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20este%20%7B%7D.%20Are%20%7B%7D%20m%C3%A2ini%2C%20%7B%7D%20picioare.%20Nu%20are%20nicio%20arm%C4%83..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: Structuri asemănătoare tuplurilor
  content_markdown: |
    Pentru a fi conciși, puteți creea structuri care sunt folosite asemănător unor tupluri.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Acesta%20este%20tot%20un%20struct%20pe%20stiv%C4%83%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: Structuri asemănătoare unităților
  content_markdown: >
    Structurile nu trebuie neapărat să aibă câmpuri.


    După cum am menționat în Capitolul 1, *unitate* este o altă denumire pentru un tuplu gol, `()`.
    De aceea, acest tip de structuri se numește *Unit-like*.


    Acest tip de structuri este folosit rar.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D%0A
- title: Enumerații
  content_markdown: >
    Enumerațiile vă permit să creați un tip nou de date care poate avea o valoare dintr-o
    mulțime de elemente prestabilite folosind cuvântul cheie `enum`.


    `match` ne ajută să abordăm toate valorile posibile ale unei enumerații, făcând din acest tip
    o unealtă importantă în ceea ce privește scrierea codului de calitate.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20aceast%C4%83%20linie%20opre%C8%99te%20avertiz%C4%83rile%20compilatorului%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22ghiar%C4%83%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%20este%20crab%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%20este%20caracati%C8%9B%C4%83%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%20este%20pe%C8%99te%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%20este%20scoic%C4%83%22%2Cferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: Enumerațiile care conțin tipuri de Date
  content_markdown: >
    Elementele unui `enum` pot avea de asemenea unul sau mai multe tipuri de date, permițându-i acestuia să se comporte
    ca un *union* din limbajul C.


    Atunci când un `enum` este utilizat într-un `match`, puteți lega un nume de variabilă
    la fiecare valoare din `enum`.


    Detalii despre memorie pentru un `enum`:

    * O variabilă egalată cu o valoare provenită dintr-o enumerație va avea dimensiunea în memorie egală cu cea a elementului care ocupă dimensiunea maximă
    Acest lucru asigură faptul că orice valoare posibilă va încăpea în aceeași dimensiune din memorie.

    * Pe lângă tipul de date al unui element (dacă acesta are un tip), fiecare element are de asemenea asociată
    o valoare numerică care reprezintă indexul acestuia în enumerație.


    Alte detalii:

    * `enum`-ul din Rust este cunoscut și ca *uniune etichetată* (tagged union).

    * Combinarea mai multor tipuri de date pentru a creea unul nou este ceea ce îi face pe oameni
    să afirme faptul că Rust are *tipuri algebrice*.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20aceast%C4%83%20linie%20opre%C8%99te%20avertiz%C4%83rile%20compilatorului%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20datele%20din%20SeaCreature%20sunt%20pe%20stiv%C4%83%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20Struct-ul%20String%20este%20de%20asemenea%20pe%20stiv%C4%83%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20dar%20%C8%9Bine%20o%20referin%C8%9B%C4%83%20a%20informa%C8%9Biei%20pe%20heap%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22mari%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22mici%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20este%20un%20crab%20cu%20%7B%7D%20ghiare%20%7B%7D%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20este%20un%20crab%20cu%20alte%20arme%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20este%20alt%20animal%22)%2C%0A%20%20%20%20%7D%0A%7D
- title: Capitolul 3 - Încheiere
  content_markdown: >
    Ce palpitant! Acum avem în sfârșit toate uneltele de bază pentru a reprezenta
    ideile noastre în cod. Sper că acum 

    putem vedea puțin din cum operațiile fundamentale din Rust funcționează armonios și în mod
    concis cu tipurile sale de date. În cele ce urmează o să vorbim despre 

    un concept care atribuie tipurilor noastre de date și mai multă flexibilitate în reprezentare:
    *genericitate* (generics).
